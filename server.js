// Generated by CoffeeScript 1.3.3
(function() {
  var app, config, main, redis, rtg,
    _this = this;

  this.express = require('express');

  this.twilio = require('twilio');

  config = require('./config');

  app = this.express();

  main = function() {
    var actions, checkDecisionPlugins, getParameters, runPlugin, saveParameters;
    app.use(_this.express.bodyParser());
    app.get('/', function(request, response) {
      return response.send('Hello World');
    });
    getParameters = function(callSid, pluginHash) {
      console.log('getting stuff', callSid, pluginHash);
      return global.redis.hget(callSid, pluginHash, function(err, response) {
        return console.log('got from redis:', callSid, pluginHash, response);
      });
    };
    saveParameters = function(callSid, request) {
      var obj,
        _this = this;
      if (request.query.pluginHash != null) {
        obj = JSON.stringify(request.body);
        return global.redis.hset(callSid, request.query.pluginHash, obj, function(err, response) {
          console.log('set to redis:', callSid, request.query.pluginHash, response);
          return getParameters(callSid, request.query.pluginHash);
        });
      }
    };
    runPlugin = function(callSid, request, response) {
      var decision;
      decision = decisionPlugin.run(callSid, request, response);
      return decisionPlugin.setHasRun();
    };
    checkDecisionPlugins = function(callSid, request, response, i) {
      var decisionPlugin;
      if (!i) {
        i = 0;
      }
      if (i !== config.plugins.decisions.length) {
        console.log('checking decision plugin', i);
        decisionPlugin = config.plugins.decisions[i];
        return decisionPlugin.getHasRun(callSid, function(callbackResponse) {
          if (callbackResponse === false) {
            console.log('callback false', i);
            return checkDecisionPlugins(callSid, request, response, i + 1);
          } else {
            console.log('callback response is true');
            return actions(callSid, callbackResponse, request, response);
          }
        });
      } else {
        console.log('the end of the decisionz!');
        return actions(callSid, false, request, response);
      }
    };
    actions = function(callSid, decision, request, response) {
      var actionPlugin, _i, _len, _ref, _results;
      console.log("we're at actions!");
      _ref = config.plugins.actions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        actionPlugin = _ref[_i];
        _results.push(console.log(actionPlugin));
      }
      return _results;
    };
    return app.post("/respondToVoiceCall", function(request, response) {
      var callSid;
      console.log('');
      console.log('===============');
      console.log('START NEW THING');
      console.log('===============');
      callSid = request.body.CallSid;
      saveParameters(callSid, request);
      if (_this.twilio.validateExpressRequest(request, '20f65a9da68ec4630c9c43d19baef94e')) {
        return checkDecisionPlugins(callSid, request, response);
      } else {
        return response.send("you are not twilio. Buzz off.");
      }
    });
  };

  if (process.env.REDISTOGO_URL) {
    rtg = require("url").parse(process.env.REDISTOGO_URL);
    redis = require("redis").createClient(rtg.port, rtg.hostname);
    redis.auth(rtg.auth.split(":")[1]);
  } else {
    redis = require("redis").createClient();
  }

  global.redis = redis;

  global.redis.on("error", function(err) {
    return console.log("Error " + err);
  });

  global.redis.on("connect", function() {
    global.redis.incr('started');
    global.redis.get('started', function(err, response) {
      if (!err) {
        return console.log('Started', response, 'times');
      }
    });
    return main();
  });

  app.listen(process.env.PORT || 5000);

}).call(this);
