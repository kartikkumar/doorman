// Generated by CoffeeScript 1.3.3
(function() {
  var Plugin,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Plugin = (function() {

    function Plugin(path) {
      this.setHasRun = __bind(this.setHasRun, this);

      this.retrieveData = __bind(this.retrieveData, this);

      var crypto;
      crypto = require('crypto');
      this.hash = crypto.createHash('md5').update(path).digest("hex");
    }

    Plugin.prototype.run = function() {};

    Plugin.prototype.retrieveData = function(callSid, request, response) {
      var _this = this;
      return global.redis.hget(callSid, this.hash, function(err, redisResponse) {
        var obj;
        if (!err) {
          if (redisResponse != null) {
            return obj = JSON.parse(redisResponse);
          } else {
            return run(callSid, request, response);
          }
        }
      });
    };

    Plugin.prototype.getSourcePlugin = function(name) {
      var source, theSource, _i, _len, _ref;
      theSource = false;
      _ref = global.config.plugins.sources;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        source = _ref[_i];
        if (source.__proto__.constructor.name === name) {
          theSource = source;
          break;
        }
      }
      return theSource;
    };

    Plugin.prototype.getHasRun = function(callSid) {
      var _this = this;
      global.redis.hget(callSid + '-plugins-hasrun', this.hash, function(err, response) {
        console.log('response?', response);
        return response;
      });
    };

    Plugin.prototype.setHasRun = function(callSid) {
      var _this = this;
      return global.redis.hset(callSid + '-plugins-hasrun', this.hash, true, function(err, response) {
        return response;
      });
    };

    return Plugin;

  })();

  module.exports = Plugin;

}).call(this);
